// Generated by gencpp from file ibvs/DetectionResult.msg
// DO NOT EDIT!


#ifndef IBVS_MESSAGE_DETECTIONRESULT_H
#define IBVS_MESSAGE_DETECTIONRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ibvs
{
template <class ContainerAllocator>
struct DetectionResult_
{
  typedef DetectionResult_<ContainerAllocator> Type;

  DetectionResult_()
    : s()
    , Z(0.0)  {
    }
  DetectionResult_(const ContainerAllocator& _alloc)
    : s(_alloc)
    , Z(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _s_type;
  _s_type s;

   typedef double _Z_type;
  _Z_type Z;





  typedef boost::shared_ptr< ::ibvs::DetectionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibvs::DetectionResult_<ContainerAllocator> const> ConstPtr;

}; // struct DetectionResult_

typedef ::ibvs::DetectionResult_<std::allocator<void> > DetectionResult;

typedef boost::shared_ptr< ::ibvs::DetectionResult > DetectionResultPtr;
typedef boost::shared_ptr< ::ibvs::DetectionResult const> DetectionResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibvs::DetectionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibvs::DetectionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ibvs::DetectionResult_<ContainerAllocator1> & lhs, const ::ibvs::DetectionResult_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.Z == rhs.Z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ibvs::DetectionResult_<ContainerAllocator1> & lhs, const ::ibvs::DetectionResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ibvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ibvs::DetectionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibvs::DetectionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibvs::DetectionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibvs::DetectionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibvs::DetectionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibvs::DetectionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibvs::DetectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e77c3858d67058b1a7e3b743cd831cb";
  }

  static const char* value(const ::ibvs::DetectionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e77c3858d67058bULL;
  static const uint64_t static_value2 = 0x1a7e3b743cd831cbULL;
};

template<class ContainerAllocator>
struct DataType< ::ibvs::DetectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibvs/DetectionResult";
  }

  static const char* value(const ::ibvs::DetectionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibvs::DetectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] s\n"
"float64 Z\n"
;
  }

  static const char* value(const ::ibvs::DetectionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibvs::DetectionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.Z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibvs::DetectionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibvs::DetectionResult_<ContainerAllocator>& v)
  {
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.s[i]);
    }
    s << indent << "Z: ";
    Printer<double>::stream(s, indent + "  ", v.Z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBVS_MESSAGE_DETECTIONRESULT_H
